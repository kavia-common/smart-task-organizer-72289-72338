{"is_source_file": true, "format": "Python", "description": "This file provides service functions for managing tasks and subtasks within a user-specific task management application. It includes functions to create, retrieve, update, delete, list, and mark tasks or subtasks as complete/incomplete, with support for cascading updates, filtering, and serialization for API responses.", "external_files": ["../models"], "external_methods": [], "published": ["require_user", "_serialize_task", "_serialize_subtask", "list_tasks", "create_task", "get_task", "update_task", "delete_task", "mark_task_complete", "list_subtasks", "create_subtask", "get_subtask", "update_subtask", "delete_subtask", "mark_subtask_complete"], "classes": [], "methods": [{"name": "User require_user(db: Session, user_id: Optional[int])", "description": "Ensure that a user with the given user_id exists; raises ValueError if not.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] _serialize_task(task: Task, include_subtasks: bool = True)", "description": "Serialize a Task object into a dictionary for API responses, optionally including subtasks.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] _serialize_subtask(subtask: Subtask, parent_task_for_inheritance: Optional[Task] = None)", "description": "Serialize a Subtask object into a dictionary, including inherited attributes from parent Task for UI purposes.", "scope": "", "scopeKind": ""}, {"name": "List[Dict[str,Any]] list_tasks( db: Session, user_id: int, search: Optional[str] = None, priority: Optional[int] = None, due_within_days: Optional[int] = None, sort_by: Optional[str] = None, )", "description": "Retrieve a list of tasks for the user, with optional filters for search, priority, due date, and sorting.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] create_task( db: Session, user_id: int, title: str, description: Optional[str], priority: Optional[int], estimated_minutes: Optional[int], due_at: Optional[datetime], )", "description": "Create and persist a new task for the user, returning the serialized task.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] get_task(db: Session, user_id: int, task_id: int, include_subtasks: bool = True)", "description": "Retrieve a specific task by ID for the user, optionally including its subtasks.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] update_task( db: Session, user_id: int, task_id: int, updates: Dict[str, Any], )", "description": "Update fields of an existing task for the user and return the updated serialized task.", "scope": "", "scopeKind": ""}, {"name": "bool delete_task(db: Session, user_id: int, task_id: int)", "description": "Delete a task owned by the user.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] mark_task_complete(db: Session, user_id: int, task_id: int, complete: bool = True, cascade: bool = False)", "description": "Set a task's completion status, with optional cascading to all subtasks.", "scope": "", "scopeKind": ""}, {"name": "List[Dict[str,Any]] list_subtasks(db: Session, user_id: int, task_id: Optional[int] = None)", "description": "List subtasks for the user, optionally filtered by a specific task.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] create_subtask( db: Session, user_id: int, task_id: int, title: str, description: Optional[str], parent_subtask_id: Optional[int], order_index: Optional[int], )", "description": "Create a new subtask under a task, optionally under a parent subtask.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] get_subtask(db: Session, user_id: int, subtask_id: int)", "description": "Retrieve a subtask by ID, verifying user ownership.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] update_subtask( db: Session, user_id: int, subtask_id: int, updates: Dict[str, Any], )", "description": "Update fields of a subtask, including parent assignment with checks to prevent cycles.", "scope": "", "scopeKind": ""}, {"name": "bool delete_subtask(db: Session, user_id: int, subtask_id: int)", "description": "Delete a subtask owned by the user.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] mark_subtask_complete( db: Session, user_id: int, subtask_id: int, complete: bool = True, cascade: bool = False, )", "description": "Set a subtask's completion status with optional cascade to child subtasks.", "scope": "", "scopeKind": ""}, {"name": "_cascade_subtasks_completion(subtask: Subtask, complete: bool)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "bool _is_descendant(candidate_parent: Subtask, potential_ancestor: Subtask)", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["require_user", "db.get", "db.add", "db.commit", "db.refresh", "db.scalars", "select", "and_", "or_", "datetime.utcnow", "timedelta", "_serialize_task", "_serialize_subtask", "_cascade_subtasks_completion"], "search-terms": ["tasks management", "subtasks hierarchy", "serialize task", "list tasks with filters", "complete task cascade", "subtask parent-child", "task creation", "task update", "task deletion", "subtask creation", "subtask update", "subtask delete", "mark subtask complete"], "state": 2, "file_id": 10, "knowledge_revision": 30, "git_revision": "e3e581291c1f61a2149e0e7fa78b78227bdb79b3", "revision_history": [{"25": ""}, {"30": "e3e581291c1f61a2149e0e7fa78b78227bdb79b3"}], "ctags": [{"_type": "tag", "name": "_cascade_subtasks_completion", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def _cascade_subtasks_completion(subtask: Subtask, complete: bool):$/", "language": "Python", "kind": "function", "signature": "(subtask: Subtask, complete: bool)"}, {"_type": "tag", "name": "_is_descendant", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def _is_descendant(candidate_parent: Subtask, potential_ancestor: Subtask) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(candidate_parent: Subtask, potential_ancestor: Subtask)"}, {"_type": "tag", "name": "_serialize_subtask", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def _serialize_subtask(subtask: Subtask, parent_task_for_inheritance: Optional[Task] = None) -> /", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(subtask: Subtask, parent_task_for_inheritance: Optional[Task] = None)"}, {"_type": "tag", "name": "_serialize_task", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def _serialize_task(task: Task, include_subtasks: bool = True) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(task: Task, include_subtasks: bool = True)"}, {"_type": "tag", "name": "create_subtask", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def create_subtask($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( db: Session, user_id: int, task_id: int, title: str, description: Optional[str], parent_subtask_id: Optional[int], order_index: Optional[int], )"}, {"_type": "tag", "name": "create_task", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def create_task($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( db: Session, user_id: int, title: str, description: Optional[str], priority: Optional[int], estimated_minutes: Optional[int], due_at: Optional[datetime], )"}, {"_type": "tag", "name": "delete_subtask", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def delete_subtask(db: Session, user_id: int, subtask_id: int) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(db: Session, user_id: int, subtask_id: int)"}, {"_type": "tag", "name": "delete_task", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def delete_task(db: Session, user_id: int, task_id: int) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(db: Session, user_id: int, task_id: int)"}, {"_type": "tag", "name": "get_subtask", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def get_subtask(db: Session, user_id: int, subtask_id: int) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(db: Session, user_id: int, subtask_id: int)"}, {"_type": "tag", "name": "get_task", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def get_task(db: Session, user_id: int, task_id: int, include_subtasks: bool = True) -> Dict[str/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(db: Session, user_id: int, task_id: int, include_subtasks: bool = True)"}, {"_type": "tag", "name": "list_subtasks", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def list_subtasks(db: Session, user_id: int, task_id: Optional[int] = None) -> List[Dict[str, An/", "language": "Python", "typeref": "typename:List[Dict[str,Any]]", "kind": "function", "signature": "(db: Session, user_id: int, task_id: Optional[int] = None)"}, {"_type": "tag", "name": "list_tasks", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def list_tasks($/", "language": "Python", "typeref": "typename:List[Dict[str,Any]]", "kind": "function", "signature": "( db: Session, user_id: int, search: Optional[str] = None, priority: Optional[int] = None, due_within_days: Optional[int] = None, sort_by: Optional[str] = None, )"}, {"_type": "tag", "name": "mark_subtask_complete", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def mark_subtask_complete($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( db: Session, user_id: int, subtask_id: int, complete: bool = True, cascade: bool = False, )"}, {"_type": "tag", "name": "mark_task_complete", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def mark_task_complete(db: Session, user_id: int, task_id: int, complete: bool = True, cascade: /", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(db: Session, user_id: int, task_id: int, complete: bool = True, cascade: bool = False)"}, {"_type": "tag", "name": "require_user", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def require_user(db: Session, user_id: Optional[int]) -> User:$/", "language": "Python", "typeref": "typename:User", "kind": "function", "signature": "(db: Session, user_id: Optional[int])"}, {"_type": "tag", "name": "update_subtask", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def update_subtask($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( db: Session, user_id: int, subtask_id: int, updates: Dict[str, Any], )"}, {"_type": "tag", "name": "update_task", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def update_task($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( db: Session, user_id: int, task_id: int, updates: Dict[str, Any], )"}], "hash": "315a7d7949c8b50ffb0db9c56321ddc0", "format-version": 4, "code-base-name": "todo_backend", "filename": "todo_backend/app/services/tasks_service.py"}