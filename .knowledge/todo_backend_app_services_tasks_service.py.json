{"is_source_file": true, "format": "Python", "description": "This is a Python source file implementing core task and subtask management functions for a task organization app, including CRUD operations, serialization, filtering, and ownership validation.", "external_files": ["../models"], "external_methods": ["db.get", "db.add", "db.commit", "db.refresh", "db.delete", "db.scalars", "select", "and_", "or_", "select"], "published": ["require_user", "list_tasks", "create_task", "get_task", "update_task", "delete_task", "mark_task_complete", "list_subtasks", "create_subtask", "get_subtask", "update_subtask", "delete_subtask", "mark_subtask_complete"], "classes": [], "methods": [{"name": "User require_user(db: Session, user_id: Optional[int])", "description": "Ensures a user with the specified user_id exists; raises ValueError if not.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] _serialize_task(task: Task, include_subtasks: bool = True)", "description": "Serializes a Task object into a dictionary for API responses.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] _serialize_subtask(subtask: Subtask, parent_task_for_inheritance: Optional[Task] = None)", "description": "Serializes a Subtask object, including inherited attributes from parent task for UI convenience.", "scope": "", "scopeKind": ""}, {"name": "List[Dict[str,Any]] list_tasks( db: Session, user_id: int, search: Optional[str] = None, priority: Optional[int] = None, due_within_days: Optional[int] = None, sort_by: Optional[str] = None, )", "description": "Retrieves a filtered and sorted list of tasks for a user.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] create_task( db: Session, user_id: int, title: str, description: Optional[str], priority: Optional[int], estimated_minutes: Optional[int], due_at: Optional[datetime], )", "description": "Creates a new task for the user with provided details.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] get_task(db: Session, user_id: int, task_id: int, include_subtasks: bool = True)", "description": "Retrieves a specific task with optional inclusion of subtasks.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] update_task( db: Session, user_id: int, task_id: int, updates: Dict[str, Any], )", "description": "Updates the specified fields of a user's task.", "scope": "", "scopeKind": ""}, {"name": "bool delete_task(db: Session, user_id: int, task_id: int)", "description": "Deletes a task owned by the user.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] mark_task_complete(db: Session, user_id: int, task_id: int, complete: bool = True, cascade: bool = False)", "description": "Marks a task (and optionally its subtasks) as complete or incomplete, with cascade option.", "scope": "", "scopeKind": ""}, {"name": "List[Dict[str,Any]] list_subtasks(db: Session, user_id: int, task_id: Optional[int] = None)", "description": "Lists subtasks for a user, optionally filtered by parent task.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] create_subtask( db: Session, user_id: int, task_id: int, title: str, description: Optional[str], parent_subtask_id: Optional[int], order_index: Optional[int], )", "description": "Creates a subtask under a specific task, with optional parent subtask.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] get_subtask(db: Session, user_id: int, subtask_id: int)", "description": "Retrieves a subtask by ID, verifying user ownership.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] update_subtask( db: Session, user_id: int, subtask_id: int, updates: Dict[str, Any], )", "description": "Updates fields of a subtask, including reassignment to a different parent subtask.", "scope": "", "scopeKind": ""}, {"name": "bool _is_descendant(candidate_parent: Subtask, potential_ancestor: Subtask)", "description": "Checks if a subtask is a descendant of another subtask.", "scope": "", "scopeKind": ""}, {"name": "bool delete_subtask(db: Session, user_id: int, subtask_id: int)", "description": "Deletes a subtask after ownership verification.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] mark_subtask_complete( db: Session, user_id: int, subtask_id: int, complete: bool = True, cascade: bool = False, )", "description": "Marks a subtask (and optionally its children) as complete or incomplete, with cascade option.", "scope": "", "scopeKind": ""}, {"name": "_cascade_subtasks_completion(subtask: Subtask, complete: bool)", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["db.get", "db.add", "db.commit", "db.refresh", "db.delete", "db.scalars", "select", "and_", "or_", "require_user", "list", "list_user", "serialize_task", "serialize_subtask", "raise ValueError", "raise LookupError", "datetime.utcnow", "timedelta", "str.strip", "int", "bool", "list"], "search-terms": ["tasks", "subtasks", "task management", "serialization", "ownership validation", "filtering", "sorting", "completion cascade", "task creation", "task update", "task deletion", "subtask hierarchy"], "state": 2, "file_id": 10, "knowledge_revision": 25, "git_revision": "", "ctags": [{"_type": "tag", "name": "_cascade_subtasks_completion", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def _cascade_subtasks_completion(subtask: Subtask, complete: bool):$/", "language": "Python", "kind": "function", "signature": "(subtask: Subtask, complete: bool)"}, {"_type": "tag", "name": "_is_descendant", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def _is_descendant(candidate_parent: Subtask, potential_ancestor: Subtask) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(candidate_parent: Subtask, potential_ancestor: Subtask)"}, {"_type": "tag", "name": "_serialize_subtask", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def _serialize_subtask(subtask: Subtask, parent_task_for_inheritance: Optional[Task] = None) -> /", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(subtask: Subtask, parent_task_for_inheritance: Optional[Task] = None)"}, {"_type": "tag", "name": "_serialize_task", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def _serialize_task(task: Task, include_subtasks: bool = True) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(task: Task, include_subtasks: bool = True)"}, {"_type": "tag", "name": "create_subtask", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def create_subtask($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( db: Session, user_id: int, task_id: int, title: str, description: Optional[str], parent_subtask_id: Optional[int], order_index: Optional[int], )"}, {"_type": "tag", "name": "create_task", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def create_task($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( db: Session, user_id: int, title: str, description: Optional[str], priority: Optional[int], estimated_minutes: Optional[int], due_at: Optional[datetime], )"}, {"_type": "tag", "name": "delete_subtask", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def delete_subtask(db: Session, user_id: int, subtask_id: int) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(db: Session, user_id: int, subtask_id: int)"}, {"_type": "tag", "name": "delete_task", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def delete_task(db: Session, user_id: int, task_id: int) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(db: Session, user_id: int, task_id: int)"}, {"_type": "tag", "name": "get_subtask", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def get_subtask(db: Session, user_id: int, subtask_id: int) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(db: Session, user_id: int, subtask_id: int)"}, {"_type": "tag", "name": "get_task", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def get_task(db: Session, user_id: int, task_id: int, include_subtasks: bool = True) -> Dict[str/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(db: Session, user_id: int, task_id: int, include_subtasks: bool = True)"}, {"_type": "tag", "name": "list_subtasks", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def list_subtasks(db: Session, user_id: int, task_id: Optional[int] = None) -> List[Dict[str, An/", "language": "Python", "typeref": "typename:List[Dict[str,Any]]", "kind": "function", "signature": "(db: Session, user_id: int, task_id: Optional[int] = None)"}, {"_type": "tag", "name": "list_tasks", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def list_tasks($/", "language": "Python", "typeref": "typename:List[Dict[str,Any]]", "kind": "function", "signature": "( db: Session, user_id: int, search: Optional[str] = None, priority: Optional[int] = None, due_within_days: Optional[int] = None, sort_by: Optional[str] = None, )"}, {"_type": "tag", "name": "mark_subtask_complete", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def mark_subtask_complete($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( db: Session, user_id: int, subtask_id: int, complete: bool = True, cascade: bool = False, )"}, {"_type": "tag", "name": "mark_task_complete", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def mark_task_complete(db: Session, user_id: int, task_id: int, complete: bool = True, cascade: /", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(db: Session, user_id: int, task_id: int, complete: bool = True, cascade: bool = False)"}, {"_type": "tag", "name": "require_user", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def require_user(db: Session, user_id: Optional[int]) -> User:$/", "language": "Python", "typeref": "typename:User", "kind": "function", "signature": "(db: Session, user_id: Optional[int])"}, {"_type": "tag", "name": "update_subtask", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def update_subtask($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( db: Session, user_id: int, subtask_id: int, updates: Dict[str, Any], )"}, {"_type": "tag", "name": "update_task", "path": "/home/kavia/workspace/code-generation/smart-task-organizer-72289-72338/todo_backend/app/services/tasks_service.py", "pattern": "/^def update_task($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( db: Session, user_id: int, task_id: int, updates: Dict[str, Any], )"}], "hash": "71f72f9eb3265e76ce1bca8d1cf4d7b3", "format-version": 4, "code-base-name": "todo_backend", "filename": "todo_backend/app/services/tasks_service.py", "revision_history": [{"25": ""}]}